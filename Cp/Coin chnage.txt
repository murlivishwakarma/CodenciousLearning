class Solution {
      
      int coin(int ind,int target,int[] coins,int[][] dp){ 
          if(ind==0){
              
              if(target%coins[ind]==0)
              {
                     return target/coins[ind];
              }
              else return  (int) 1e9;

              

          }
            if(dp[ind][target]!=-1) return dp[ind][target];
         int notTake = coin(ind-1,target,coins,dp);
         int take =Integer.MAX_VALUE;
            
         if(coins[ind]<=target){
             take = 1+coin(ind,target-coins[ind],coins,dp);

         } 

         return dp[ind][target]=Math.min(take,notTake);  
      }

    public int coinChange(int[] coins, int amount) {
          
            int n = coins.length;
            
            int dp[][]=new int[n][amount+1];

            for(int i=0;i<n;i++){

                for(int j=0;j<amount+1;j++){
                      dp[i][j]=-1;
                }
            }

         
           int ans= coin(n-1,amount,coins,dp);
           if(ans>=1e9) return -1;

           return ans;
    }
}